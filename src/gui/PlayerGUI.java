/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.GameClient;
import games.ArstoidStorm.gui.AsteroidStormPanel;
import games.Snake.gui.SnakePanel;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import org.jb2011.lnf.beautyeye.BeautyEyeLNFHelper;

/**
 *
 * @author Churchy
 */
public class PlayerGUI extends javax.swing.JFrame
{

    private JPanel aktPanel;
    private boolean connected = false;
    private GameClient gClient;

    /**
     * Creates new form PlayerGUI
     */
    public PlayerGUI()
    {
        initComponents();
        this.setSize(600, 600);
        this.setLocationRelativeTo(null);
        //HangmanPanel hmp = new HangmanPanel();
        this.setVisible(true);
        gClient = new GameClient();
        //hmp.startGame();
        showGameChooser();
    }

    public void showGameChooser()
    {
        GameChooserPanel gcp = new GameChooserPanel(pnGame, gClient, this);
        aktPanel = gcp;
        pnGame.removeAll();
        pnGame.add(gcp);
        pnGame.updateUI();
    }

    public void setAktPanel(JPanel aktPanel)
    {
        this.aktPanel = aktPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnTop = new javax.swing.JPanel();
        pnServer = new javax.swing.JPanel();
        pnIP = new javax.swing.JPanel();
        tfIP = new javax.swing.JTextField();
        pnPort = new javax.swing.JPanel();
        tfPort = new javax.swing.JTextField();
        btConnect = new javax.swing.JButton();
        btHome = new javax.swing.JButton();
        pnGame = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnTop.setLayout(new java.awt.BorderLayout());

        pnServer.setLayout(new java.awt.GridLayout(1, 4, 5, 0));

        pnIP.setBorder(javax.swing.BorderFactory.createTitledBorder("IP-Adress"));
        pnIP.setLayout(new java.awt.BorderLayout());

        tfIP.setText("127.0.0.1");
        pnIP.add(tfIP, java.awt.BorderLayout.CENTER);

        pnServer.add(pnIP);

        pnPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port"));
        pnPort.setLayout(new java.awt.BorderLayout());

        tfPort.setText("9999");
        pnPort.add(tfPort, java.awt.BorderLayout.CENTER);

        pnServer.add(pnPort);

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onDisConnect(evt);
            }
        });
        pnServer.add(btConnect);

        pnTop.add(pnServer, java.awt.BorderLayout.CENTER);

        btHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/pictures/home.png"))); // NOI18N
        btHome.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onHomeBT(evt);
            }
        });
        pnTop.add(btHome, java.awt.BorderLayout.EAST);

        getContentPane().add(pnTop, java.awt.BorderLayout.NORTH);

        pnGame.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnGame.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(pnGame, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onHomeBT(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onHomeBT
    {//GEN-HEADEREND:event_onHomeBT
        if (!(aktPanel instanceof GameChooserPanel))
        {
            if (gClient.isConnected())
            {
                try
                {
                    gClient.sendObject("##GO##HOME##");
                } catch (IOException ex)
                {
                    Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(aktPanel instanceof AsteroidStormPanel)
            {
                AsteroidStormPanel asp = (AsteroidStormPanel) aktPanel;
                asp.endGame();
            }else if(aktPanel instanceof SnakePanel)
            {
                SnakePanel sp = (SnakePanel) aktPanel;
                sp.endGame();
            }
            showGameChooser();
        }

    }//GEN-LAST:event_onHomeBT

    private void onDisConnect(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onDisConnect
    {//GEN-HEADEREND:event_onDisConnect
        try
        {
            if (!connected)
            {
                String inetAddress = tfIP.getText();
                String[] ipParts = inetAddress.split("\\.");
                if (ipParts.length != 4)
                {
                    throw new Exception("Invalid IP address!");
                }
                for (String ipPart : ipParts)
                {
                    for (int i = 0; i < ipPart.length(); i++)
                    {
                        if (ipPart.toUpperCase().charAt(i) < '0' || ipPart.toUpperCase().charAt(i) > '9')
                        {
                            throw new Exception("Invalid IP address!\n"
                                    + "Numbers only!");
                        }
                    }
                }

                for (String ipPart : ipParts)
                {
                    int num = Integer.parseInt(ipPart);
                    if (num < 0 || num > 255)
                    {
                        throw new Exception("Invalid IP address!\n"
                                + "Only number from 0 to 255!");
                    }
                }

                String nickname = JOptionPane.showInputDialog("Please enter nickname");
                String portString = tfPort.getText();
                if (!inetAddress.isEmpty() && !portString.isEmpty())
                {
                    try
                    {
                        gClient.setPORTNR(Integer.parseInt(portString));
                        gClient.setAddress(inetAddress);
                        gClient.startClient();
                        gClient.setNickname(nickname);
                        connected = true;
                        btConnect.setText("Disconnect");
                    } catch (IOException ex)
                    {
                        JOptionPane.showMessageDialog(this, "An error occurred", "ERROR", JOptionPane.ERROR_MESSAGE);
                    } catch (NumberFormatException ex)
                    {
                        JOptionPane.showMessageDialog(this, "Please enter valid portnumber", "Invalid port", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else
            {
                try
                {
                    gClient.stopClient();
                    connected = false;
                    btConnect.setText("Connect");
                } catch (IOException ex)
                {
                    JOptionPane.showMessageDialog(this, "An error occurred", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "IP-ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onDisConnect

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {

        try
        {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            try
            {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
                {
                    if ("Nimbus".equals(info.getName()))
                    {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex)
            {
                java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex)
            {
                java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex)
            {
                java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex)
            {
                java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            BeautyEyeLNFHelper.translucencyAtFrameInactive = false;
            BeautyEyeLNFHelper.launchBeautyEyeLNF();
            UIManager.put("RootPane.setupButtonVisible", false);

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable()
            {
                public void run()
                {
                    new PlayerGUI();
                    new ServerGUI().setVisible(true);
                }
            });
        } catch (Exception ex)
        {
            Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btHome;
    private javax.swing.JPanel pnGame;
    private javax.swing.JPanel pnIP;
    private javax.swing.JPanel pnPort;
    private javax.swing.JPanel pnServer;
    private javax.swing.JPanel pnTop;
    private javax.swing.JTextField tfIP;
    private javax.swing.JTextField tfPort;
    // End of variables declaration//GEN-END:variables
}
