/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package games.BoxJumper.gui;

import games.BoxJumper.bl.Box;
import games.BoxJumper.bl.BoxJumper;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import static vierGewinnt.gui.VierGewinntPanel.spieler1;
import static vierGewinnt.gui.VierGewinntPanel.spieler2;

/**
 * @since 12.06.2015
 * @author Lukas Kirchsteiger
 */
public class BoxJumperPanel extends javax.swing.JPanel implements Runnable {

    private Thread thread;

    private BoxJumper boxJumper = new BoxJumper();

    private final Color groundColor = Color.DARK_GRAY;
    private final int DIV = 20;
    private final int POSITION_OF_GROUND = 5;

    private double w;
    private double h;

    private Set<Box> boxes = new HashSet<>();

    private boolean jump;
    private boolean up = true;
    private int heightOfJump = 0;
    private int jumpTime = 20;

    private int score;

    private Timer addTimer = new Timer(10, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {

        }
    });

    /**
     * Creates new form BoxJumperGUI
     */
    public BoxJumperPanel() {
        initComponents();
    }

    public void restart() {
        thread = new Thread(this);
        thread.start();
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        Graphics2D g = (Graphics2D) graphics;

        w = this.getWidth() / DIV;
        h = this.getHeight() / DIV;

        double jumpMultiplier = h / 10;

        g.setColor(groundColor);
        g.fill(new Rectangle2D.Double(0, h * (DIV - POSITION_OF_GROUND), this.getWidth(), h));

        if (jump) {
            if (up) {
                heightOfJump--;
            } else {
                heightOfJump++;
            }
            if (heightOfJump == -jumpTime) {
                up = false;
            }
            if (heightOfJump == 0) {
                up = true;
                jump = false;
            }

        }

        for (Box box : boxes) {
            box.move(w / 4);
            g.setColor(box.getColor());
            g.fill(box);
            if (box.getX() < 0) {
                boxes.remove(box);
                score++;
            } else if (box.intersects(boxJumper)) {
                thread.interrupt();
            }
        }

        boxJumper.setFrame(w * 2, h * (DIV - POSITION_OF_GROUND - 1) + jumpMultiplier * heightOfJump, w, h);

        g.drawString(score + "", (float) w * 2, (float) h * 2);

        g.setColor(boxJumper.getColor());
        g.fill(boxJumper);
    }

    public void jump() {
        if (!jump) {
            jump = true;
        }
    }

    public void addBox() {
        Box box = new Box();
        box.setFrame(this.getWidth(), h * (DIV - POSITION_OF_GROUND - 1), w, h);
        boxes.add(box);
    }

    @Override
    public void run() {
        int count = 0;
        try {
            while (!Thread.interrupted()) {
                Thread.sleep(15);
                count++;
                repaint();
//                if (count % 10 == 0) {
//                    jump();
//                }
                if (count % 50 == 0) {
                    addBox();
                }

            }
        } catch (InterruptedException ex) {
            System.out.println(ex.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onMove(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onMove(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onMove
        if ((evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_W)) {
            System.out.println("jump");
            jump();
        }
    }//GEN-LAST:event_onMove

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.setSize(800, 800);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.setLayout(new BorderLayout());

        JPanel pn = new JPanel(new BorderLayout());

        BoxJumperPanel bjp = new BoxJumperPanel();

        pn.add(bjp);

        //pn.setBorder(new TitledBorder(new EmptyBorder(5, 0, 0, 0), "Snake", TitledBorder.CENTER, TitledBorder.ABOVE_TOP));
        frame.add(pn, BorderLayout.CENTER);

        frame.setVisible(true);

        bjp.restart();

        bjp.requestFocus();

        /*Thread t = new Thread(bjp);
         t.start();*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
