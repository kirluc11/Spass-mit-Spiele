/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package games.ArstoidStorm.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.border.LineBorder;

/**
 * Main panel of the game Asteroid Storm
 * @author Marcel, Lukas
 */
public class AsteroidStormPanel extends javax.swing.JPanel {

    private AsteroidStormInnerPanel asip;
    private int numberX;
    private int numberY;
    private int moveSpeed = 10;
    private Thread thread;

    /**
     * Creates new form AsteroidStormPanel
     */
    public AsteroidStormPanel() {
        initComponents();
        asip = new AsteroidStormInnerPanel(lbScore);
        this.add(asip,BorderLayout.CENTER);
        this.setFocusable(true);
        startGame();

    }

    /**
     * Starts a new Game
     */
    public void startGame() {

        thread = new Thread((Runnable) asip);
        thread.start();

    }
    
    public void endGame()
    {
        thread.interrupt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        
        pmRestart = new javax.swing.JPopupMenu();
        miRestart = new javax.swing.JMenuItem();

        miRestart.setText("Restart");
        miRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRestart(evt);
            }
        });
        pmRestart.add(miRestart);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("AsteroidStorm"));
        setComponentPopupMenu(pmRestart);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onMove(evt);
            }
        });
        lbScore = new JLabel("0");
        lbScore.setHorizontalAlignment((int) CENTER_ALIGNMENT);
        lbScore.setOpaque(true);
        lbScore.setBackground(Color.BLACK);
        lbScore.setForeground(Color.white);
        lbScore.setBorder(new LineBorder(Color.white));
        this.setLayout(new BorderLayout());
        this.add(lbScore,BorderLayout.NORTH);

    }
    
    public void restartGame()
    {
        thread.interrupt();
        asip.setAus(false);
        numberX = 0;
        numberY = 0;
        asip.setNumberX(numberX);
        asip.setNumberY(numberY);
        asip.setCoordY(0);
        asip.setSpeed(5);
        asip.setScore(0);
        lbScore.setText("0");
        startGame();
    }

    /**
     * This method is called if player presses a key
     * and depending on which key he is pressing 
     * the player move
     * @param evt 
     */
    private void onMove(java.awt.event.KeyEvent evt)
    {

        if (!asip.isAus()) {

            if ((evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_W) && numberY > (asip.getHeight() / 2) * -1) {

                numberY = numberY - moveSpeed;
                asip.setNumberY(numberY);
                asip.collision();
            } else if ((evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_S) && numberY < asip.getHeight() / 2 - asip.getHeight() / 20) {

                numberY = numberY + moveSpeed;
                asip.setNumberY(numberY);
                asip.collision();
            } else if ((evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_D) && numberX < (asip.getWidth() / 2 - asip.getWidth() / 20)) {
                numberX = numberX + moveSpeed;
                asip.setNumberX(numberX);
                asip.collision();
            } else if ((evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_A) && numberX > (asip.getWidth() / 2) * -1) {
                numberX = numberX - moveSpeed;
                asip.setNumberX(numberX);
                asip.collision();
            }
        }
    }

    /**
     * Restarts the whole game
     * @param evt 
     */
    private void onRestart(java.awt.event.ActionEvent evt)
    {
        restartGame();
    }

    private JMenuItem miRestart;
    private JPopupMenu pmRestart;
    private JLabel lbScore;
    
}
